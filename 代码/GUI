import tkinter as tk
import tensorflow as tf
import numpy as np
import pandas as pd
import re
import string

# 载入模型
model = tf.keras.models.load_model('m1.h5')
#进行文本预处理转换为数值
def text_process(text):

    remove_punctuation = string.punctuation
    #将文本向量化
    tokenizer = tf.keras.preprocessing.text.Tokenizer(filters='!"#$%&()*+,-./:;<=>?@[\]^_`{|}~\t\n')

    vocab=tokenizer.word_index
    stopwords = ['very', 'ourselves', 'am', 'doesn', 'through', 'me', 'against', 'up', 'just', 'her', 'ours',
                 'couldn', 'because', 'is', 'isn', 'it', 'only', 'in', 'such', 'too', 'mustn', 'under', 'their',
                 'if', 'to', 'my', 'himself', 'after', 'why', 'while', 'can', 'each', 'itself', 'his', 'all', 'once',
                 'herself', 'more', 'our', 'they', 'hasn', 'on', 'ma', 'them', 'its', 'where', 'did', 'll', 'you',
                 'didn', 'nor', 'as', 'now', 'before', 'those', 'yours', 'from', 'who', 'was', 'm', 'been', 'will',
                 'into', 'same', 'how', 'some', 'of', 'out', 'with', 's', 'being', 't', 'mightn', 'she', 'again', 'be',
                 'by', 'shan', 'have', 'yourselves', 'needn', 'and', 'are', 'o', 'these', 'further', 'most', 'yourself',
                 'having', 'aren', 'here', 'he', 'were', 'but', 'this', 'myself', 'own', 'we', 'so', 'i', 'does',
                 'both',
                 'when', 'between', 'd', 'had', 'the', 'y', 'has', 'down', 'off', 'than', 'haven', 'whom', 'wouldn',
                 'should', 've', 'over', 'themselves', 'few', 'then', 'hadn', 'what', 'until', 'won', 'no', 'about',
                 'any', 'that', 'for', 'shouldn', 'don', 'do', 'there', 'doing', 'an', 'or', 'ain', 'hers', 'wasn',
                 'weren', 'above', 'a', 'at', 'your', 'theirs', 'below', 'other', 'not', 're', 'him', 'during', 'which']
    # 去掉每个句子的标点符号
    strings = re.sub('[{}]'.format(remove_punctuation), "", text)

    # 转换小写和分词
    words_seq = strings.lower().split()

    words = []  # 列表储存去词后的词语
    for word in words_seq:  # 把停用词去掉
        if word not in stopwords:
            words.append(word)  #
    print(words)

    tokenizer.fit_on_texts(words)
    print(tokenizer.texts_to_sequences(words))
    # 对文本转换成数字序列
    sequence = np.array(tokenizer.texts_to_sequences(words)).reshape((1, len(words)))

    #padding
    pad_sequence = tf.keras.preprocessing.sequence.pad_sequences(sequence, maxlen=100)

    return pad_sequence


# 创建主窗口
window = tk.Tk()
window.title('英文文本分类')
window.geometry('450x500')
window.resizable(width = False,height = True)
# 窗口位于屏幕中间
screenwidth = window.winfo_screenwidth()
screenheight = window.winfo_screenheight()
alignstr = '%dx%d+%d+%d' % (450, 500, (screenwidth-450)/2, (screenheight-500)/2)
window.geometry(alignstr)
#设置标题
label_title = tk.Label(window, text='Text Classification', bg = 'green',font=('Arial', 25), width=20, height=2)
label_title.pack(pady=25)
#输入提示
label_tip = tk.Label(window, text='Input', font=('Arial', 15), width=15, height=2)
label_tip.pack(padx=100)
# 输入框
enter = tk.Entry(window, width=50)
enter.pack(padx=100, pady=10)
#将窗口与模型联系起来
def text_predict():
   
    text = enter.get()   # 获取输入框的文本

    enter.delete(0, "end")  # 清空输入框

    sequence = text_process(text)  # 对文本进行处理

    # 通过模型得结果
    result = model.predict(sequence)
    result_labels = np.argmax(result, axis=1)
    y_predict = list(map(str, result_labels))

    # 更新标签值
    v.set(y_predict)
# 设置标签值的变量
v = tk.StringVar()#以保证值的变更随时可以显示在界面上

# 按钮
button = tk.Button(window, text='RUN',bg = "green",font=('Arial', 10),width=10, height=2, command=text_predict)
button.pack(pady=10)

label_1 = tk.Label(window, text='Classification results', font=('Arial', 20), width=100, height=2)
label_1.pack()

label_2 = tk.Label(window, textvariable=v, font=('Arial', 10), width=50, height=2)
label_2.pack(pady=15)

window.mainloop()
